# 文件名: calculate_stiffness.py

import argparse
import sys
import numpy as np

# 定义玻尔兹曼常数，单位为 kJ/(mol·K)，与 GROMACS 的能量单位保持一致
BOLTZMANN_KJ_MOL_K = 0.008314462618

def parse_arguments():
    """解析命令行参数"""
    parser = argparse.ArgumentParser(
        description="Calculate the stiffness matrix (Gamma) from a GROMACS covariance matrix using pseudo-inverse.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        '-f', '--infile',
        required=True,
        metavar='covar.dat',
        help="Path to the input ASCII covariance matrix file (e.g., covar.dat) \n"
             "generated by 'gmx covar -ascii'."
    )
    parser.add_argument(
        '-o', '--outfile',
        required=True,
        metavar='stiffness.dat',
        help="Path to the output file for the calculated stiffness matrix."
    )
    parser.add_argument(
        '-t', '--temp',
        required=True,
        type=float,
        metavar='300',
        help="Simulation temperature in Kelvin (e.g., 300)."
    )
    return parser.parse_args()

def main():
    """主执行函数"""
    args = parse_arguments()

    print(f"Reading covariance matrix from: {args.infile}")
    try:
        # 使用 numpy.loadtxt 读取由 'gmx covar -ascii' 生成的单列数据文件
        flattened_data = np.loadtxt(args.infile)
    except FileNotFoundError:
        print(f"Error: Input file not found at '{args.infile}'")
        sys.exit(1)
    except Exception as e:
        print(f"Error: Failed to read or parse the input file. Reason: {e}")
        sys.exit(1)

    # 检查数据是否为空
    if flattened_data.size == 0:
        print("Error: The input file is empty.")
        sys.exit(1)
        
    # --- 【修改点 1: 重塑矩阵】 ---
    # GROMACS 输出的是一个长向量，需要我们手动变回方阵
    # 首先，计算矩阵的维度
    num_elements = flattened_data.size
    dim = int(np.sqrt(num_elements))

    # 检查数据总数是否为完全平方数，否则无法构成方阵
    if dim * dim != num_elements:
        print(f"Error: The number of elements in the file ({num_elements}) is not a perfect square.")
        print("The input file does not seem to be a valid square matrix representation.")
        sys.exit(1)
    
    # 将一维向量重塑为 (dim x dim) 的方阵
    covariance_matrix = flattened_data.reshape((dim, dim))
    print(f"Successfully read and reshaped data into a {covariance_matrix.shape} matrix.")
    
    # --- 原有的方阵检查现在可以移除，因为 reshape 已经保证了它是方阵 ---
    # if covariance_matrix.shape[0] != covariance_matrix.shape[1]: ...

    print(f"Calculating stiffness matrix at T = {args.temp} K...")

    try:
        # --- 【修改点 2: 使用广义逆（伪逆）】 ---
        # 协方差矩阵通常是奇异的（因为去除了整体平移和旋转），不能使用常规的 np.linalg.inv()
        # 必须使用伪逆 np.linalg.pinv() 来处理这种情况
        print("Using pseudo-inverse (np.linalg.pinv) for the singular covariance matrix...")
        inverse_covariance = np.linalg.pinv(covariance_matrix)
        
        # 乘以常数因子
        # Γ = k_B * T * C⁺  (其中 C⁺ 是 C 的伪逆)
        stiffness_matrix = BOLTZMANN_KJ_MOL_K * args.temp * inverse_covariance

    except np.linalg.LinAlgError as e:
        # 尽管 pinv 很稳健，但如果出现线性代数错误，依然需要报告
        print("\n--- CRITICAL ERROR ---")
        print(f"Matrix inversion failed even with pseudo-inverse. Reason: {e}")
        print("This indicates severe numerical instability or issues with your covariance data.")
        print("Please double-check your simulation and the 'gmx covar' analysis steps.")
        sys.exit(1)

    print(f"Saving stiffness matrix to: {args.outfile}")
    
    # 将计算得到的刚度矩阵保存到文件
    np.savetxt(args.outfile, stiffness_matrix, fmt='%.6e', delimiter='\t',
               header=f"Stiffness Matrix (Gamma) calculated from {args.infile} using pseudo-inverse\n"
                      f"Units: kJ/(mol*nm^2) | Temperature: {args.temp} K")

    print("\nCalculation successful!")
    print(f"The stiffness matrix has dimensions: {stiffness_matrix.shape}")


if __name__ == '__main__':
    main()
